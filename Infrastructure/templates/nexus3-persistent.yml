apiVersion: v1
kind: Template
labels:
  template: nexus3-persistent-template
metadata:
  name: nexus3-persistent
  annotations:
    description: Sonatype Nexus 3 persistent template
    tags: nexus
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: ${NEXUS_IMAGE}:${NEXUS_VERSION}
      name: ${NEXUS_VERSION}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${SERVICE_NAME}
    strategy:
      recreateParams:
        timeoutSeconds: 600
        post:
          failurePolicy: Abort
          execNewPod:
            containerName: ${SERVICE_NAME}
            command:
              - "/bin/bash"
              - "-c"
              - "curl -o /tmp/nexus-functions -s https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/scripts/nexus-functions; source /tmp/nexus-functions; add_nexus3_redhat_repos admin admin123 http://${SERVICE_NAME}:8081"
      type: Recreate
    template:
      metadata:
        labels:
          deploymentconfig: ${SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: CONTEXT_PATH
            value: /
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - echo
              - ok
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: ${SERVICE_NAME}
          ports:
          - containerPort: 8081
            protocol: TCP
            name: nexus
          - containerPort: 5000
            protocol: TCP
            name: registry
          readinessProbe:
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /nexus-data
            name: ${SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${SERVICE_NAME}-data
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: ${SERVICE_NAME}:${NEXUS_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    ports:
    - name: 8081-tcp
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      deploymentconfig: ${SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    port:
      targetPort: 8081-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}-registry
    labels:
      app: ${SERVICE_NAME}
  spec:
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      deploymentconfig: ${SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: ${SERVICE_NAME}-registry
    labels:
      app: ${SERVICE_NAME}
  spec:
    port:
      targetPort: 5000-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${SERVICE_NAME}-data
    labels:
      app: ${SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
parameters:
- displayName: Sonatype Nexus service name
  name: SERVICE_NAME
  value: "nexus"
- displayName: Sonatype Nexus image
  name: NEXUS_IMAGE
  value: "docker.io/sonatype/nexus3"
  required: true
- displayName: Sonatype Nexus version
  name: NEXUS_VERSION
  value: "latest"
  required: true
- displayName: Volume Space for Nexus
  name: VOLUME_CAPACITY
  value: "2Gi"
  required: true
- displayName: Max Memory
  name: MEMORY_LIMIT
  value: "2Gi"
  required: true
