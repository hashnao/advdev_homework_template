pipeline {
  agent {
    kubernetes {
      label "${MAVEN_SLAVE_IMAGE}"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate(
        name: "jnlp",
        image: "${REGISTRY_URL}/${NAMESPACE_JENKINS}/${MAVEN_SLAVE_IMAGE}",
        resourceRequestMemory: "${JENKINS_SLAVE_MEMORY_REQUEST}",
        resourceLimitMemory: "${JENKINS_SLAVE_MEMORY_LIMIT}",
        resourceRequestCpu: "${JENKINS_SLAVE_CPU_REQUEST}",
        resourceLimitCpu: "${JENKINS_SLAVE_CPU_LIMIT}"
      )
    }
  }
  environment {
    version = getVersionFromPom("${CONTEXT_DIR}/pom.xml")
    groupId = getGroupIdFromPom("${CONTEXT_DIR}/pom.xml")
    artifactId = getArtifactIdFromPom("${CONTEXT_DIR}/pom.xml")
    devTag = "${version}-${BUILD_NUMBER}"
    prodTag = "${version}"
    mvnCmd = "mvn -s ./nexus_settings.xml"
    APP_NAME = "${APP_NAME}"
    APP_IMAGE = "${APP_IMAGE}"
    BACKEND_SERVICE = "${BACKEND_SERVICE}"
    CLUSTER = "${CLUSTER}"
    GIT_SOURCE_URL = "${GIT_SOURCE_URL}"
    GIT_SOURCE_REF = "${GIT_SOURCE_REF}"
    MAVEN_SLAVE_IMAGE = "${MAVEN_SLAVE_IMAGE}"
    MAVEN_PATH = "${MAVEN_PATH}"
    NAMESPACE_DEV = "${NAMESPACE_DEV}"
    NAMESPACE_PROD = "${NAMESPACE_PROD}"
    NEXUS_URL = "${NEXUS_URL}"
    NEXUS_URI_MAVEN = "${NEXUS_URI_MAVEN}"
    NEXUS_URI_PUBLIC = "${NEXUS_URI_PUBLIC}"
    NEXUS_REGISTRY_URL = "${NEXUS_REGISTRY_URL}"
    // Create Jenkins credentials for Nexus and set the ID as nexus.
    NEXUS_CREDENTIALS = credentials("nexus")
    PATH = "$PATH:${MAVEN_PATH}"
    REGISTRY_URL = "${REGISTRY_URL}"
    SONAR_URL = "${SONAR_URL}"
    // The default Jenkins credentials ID associated with secret is the same.
    // Change the ID chekcing config.xml if it's different.
    JENKINS_DEFAULT_CREDENTIALS_ID = "1a12dfa4-7fc5-47a7-aa17-cc56572a41c7"
    TOKEN = credentials("${JENKINS_DEFAULT_CREDENTIALS_ID}")
  }
  options {
    timeout(time: 30, unit: 'MINUTES')
  }
  stages {
    stage('Variable Check') {
      steps {
        echo "version: ${version}"
        echo "devTag: ${devTag}"
        echo "prodTag: ${prodTag}"
        /*
        sh "printenv"
        sh "skopeo --version"
        sh "oc version"
        sh "which mvn"
        */
      }
    }
    stage('Check Out Source Code') {
      steps {
        git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
        sh "sed -e 's|NEXUS_URL|${NEXUS_URL}|' -e 's|NEXUS_URI_PUBLIC|${NEXUS_URI_PUBLIC}/|' -e 's|NEXUS_USER|${NEXUS_CREDENTIALS_USR}|' -e 's|NEXUS_PASSWORD|${NEXUS_CREDENTIALS_PSW}|' ./nexus_settings.xml > ${CONTEXT_DIR}/nexus_settings.xml"
      }
    }
    stage('Build Source Code') {
      steps {
        echo "Building artifacts using Maven."
        dir("${CONTEXT_DIR}") {
          sh "${mvnCmd} clean package -DskipTests=true"
        }
      }
    }
    stage('Run Unit Test') {
      steps {
        echo "Running unit tests using Maven."
        dir("${CONTEXT_DIR}") {
          sh "${mvnCmd} test"
        }
      }
    }
    stage('Run Code Coverage Tests') {
      steps {
        echo "Running code coverage tests using SonarQube."
        dir("${CONTEXT_DIR}") {
          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
        }
      }
    }
    stage('Upload Artifacts to Nexus') {
      steps {
        echo "Archiving the artifacts to the nexus repository."
        dir("${CONTEXT_DIR}") {
          sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${NEXUS_URL}/${NEXUS_URI_MAVEN}/"
        }
      }
    }
    stage('Build Container Image') {
      steps {
        echo "Building a container image ${devTag}."
        script {
          openshift.withCluster() {
            openshift.withProject("${NAMESPACE_DEV}") {
              // Define nb again as the nb definition above can be applied only within the if statement.
              def bc = openshift.selector("bc", "${APP_NAME}")
              bc.startBuild("--from-dir=${CONTEXT_DIR}/target/")
              def result = bc.logs("-f")
              // Filter non-BuildConfig objects and create selector which will find builds related to the BuildConfig
              def buildSelector = bc.related("builds")
              // Throw exception after 1 minutes
              timeout(1) {
                buildSelector.untilEach(1) {
                  return (it.object().status.phase == "Complete")
                }
              }
              echo "Builds have been completed: ${buildSelector.names()}"
              // Show exactly what oc command was executed.
              echo "Logs executed: ${result.actions[0].cmd}"
              // Show the standard output and standard error of the command.
              def logsString = result.actions[0].out
              def logsErr = result.actions[0].err
              // Tag the ${APP_NAME}:latest image as ${APP_NAME}:${devTag}
              openshift.tag("${APP_NAME}:latest", "${APP_NAME}:${devTag}")
            }
          }
        }
      }
    }
    stage('Deploy Image to Dev') {
      steps {
        echo "Deploying the image in the development environment."
        script {
          openshift.withCluster() {
            openshift.withProject("${NAMESPACE_DEV}") {
              openshift.set("image", "dc/${APP_NAME}", "${APP_NAME}=${NAMESPACE_DEV}/${APP_NAME}:${devTag}", "--source=istag")
              def dc = openshift.selector("dc", "${APP_NAME}")
              // The DC is set ConfigChange and a new deployment automatically begins
              // when DC is changed so that it's not necessary to use "oc rollout latest is".
              dc.rollout().status()
            }
          }
        }
      }
    }
    stage('Run Integration Test') {
      steps {
        echo "Running integration tests using curl."
        script {
          sleep 30
          sh "curl -k https://${APP_NAME}-${NAMESPACE_DEV}.${CLUSTER}/ws/healthz/"
          sh "curl -k https://${APP_NAME}-${NAMESPACE_DEV}.${CLUSTER}/ws/info/"
        }
      }
    }
    stage('Populate Data') {
      steps {
        echo "Populating the MLB Parks Data into the MongoDB database"
        script {
          sh "curl -k https://${APP_NAME}-${NAMESPACE_DEV}.${CLUSTER}/ws/data/load/"
        }
      }
    }
    stage('Upload Image to Nexus') {
      steps {
        echo "Archiving the container image to the nexus registry."
        script {
          sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:${TOKEN} --dest-creds ${NEXUS_CREDENTIALS_USR}:${NEXUS_CREDENTIALS_PSW} ${REGISTRY_URL}/${NAMESPACE_DEV}/${APP_NAME}:${devTag} ${NEXUS_REGISTRY_URL}/${APP_NAME}:${devTag}"
        }
      }
    }
    stage('Deploy Image to Prod') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject("${NAMESPACE_DEV}") {
              echo "Promoting imagestream from development to production environment."
              // Promote the imagestream into prod environment.
              openshift.tag("${NAMESPACE_DEV}/${APP_NAME}:${devTag}", "${NAMESPACE_PROD}/${APP_NAME}:${devTag}")
            }
            openshift.withProject("${NAMESPACE_PROD}") {
              echo "Deploying imagestream at production environment."
              openshift.set("image", "dc/${APP_NAME}-blue", "${APP_NAME}-blue=${NAMESPACE_PROD}/${APP_NAME}:${devTag}", "--source=istag")
              openshift.set("image", "dc/${APP_NAME}-green", "${APP_NAME}-green=${NAMESPACE_PROD}/${APP_NAME}:${devTag}", "--source=istag")
              def dcBlue = openshift.selector("dc", "${APP_NAME}-blue")
              // The DC is set ConfigChange and a new deployment automatically begins
              // when DC is changed so that it's not necessary to use "oc rollout latest is".
              dcBlue.rollout().status()
              def dcGreen = openshift.selector("dc", "${APP_NAME}-green")
              dcGreen.rollout().status()
            }
          }
        }
      }
    }
    stage('Switch Blue/Green') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject("${NAMESPACE_PROD}") {
              def mlbParksRoute = sh(returnStdout: true, script: "curl ${APP_NAME}-${NAMESPACE_PROD}.${CLUSTER}/ws/info/").trim()
              // Check if the returned string contains "MLB Parks (Green)"
              echo "MLBParks Route: " + mlbParksRoute
              if (mlbParksRoute.contains("MLB Parks (Green)")) {
                openshift.set("route-backends", "${APP_NAME}", "${APP_NAME}-blue=100", "${APP_NAME}-green=0")
              } else {
                openshift.set("route-backends", "${APP_NAME}", "${APP_NAME}-blue=0", "${APP_NAME}-green=100")
              }
            }
          }
        }
      }
    }
  }
}
// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
